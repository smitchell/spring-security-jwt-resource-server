{"version":3,"sources":["./src/app/api/request-builder.ts","./src/app/pages/home/home.component.ts","./src/app/pages/home/home.component.html","./src/app/components/header/header.component.html","./src/app/components/header/header.component.ts","./src/environments/environment.ts","./src/app/api/services.ts","./src/app/api/api-configuration.ts","./src/app/pages/authorized/authorized.component.ts","./src/app/pages/authorized/authorized.component.html","./src/app/directives/can-component-deactivate.ts","./src/app/pages/logout/logout.component.ts","./src/app/pages/logout/logout.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/api/base-service.ts","./src/app/api/services/api.service.ts","./src/app/app.module.ts","./src/app/services/authentication.service.ts","./src/app/components/auth/token.interceptor.ts","./src/app/components/auth/auth.service.ts","./src/app/components/auth/auth-guard.service.ts","./src/app/app-routing.module.ts","./src/app/pages/error/error.component.ts","./src/app/pages/error/error.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\nimport {HttpHeaders, HttpParameterCodec, HttpParams, HttpRequest} from '@angular/common/http';\n\n/**\n * Custom parameter codec to correctly handle the plus sign in parameter\n * values. See https://github.com/angular/angular/issues/18261\n */\nclass ParameterCodec implements HttpParameterCodec {\n  encodeKey(key: string): string {\n    return encodeURIComponent(key);\n  }\n\n  encodeValue(value: string): string {\n    return encodeURIComponent(value);\n  }\n\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  decodeValue(value: string): string {\n    return decodeURIComponent(value);\n  }\n}\nconst ParameterCodecInstance = new ParameterCodec();\n\n/**\n * Defines the options for appending a parameter\n */\ninterface ParameterOptions {\n  style?: string;\n  explode?: boolean;\n}\n\n/**\n * Base class for a parameter\n */\nabstract class Parameter {\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\n    this.options = options || {};\n    if (this.options.style === null || this.options.style === undefined) {\n      this.options.style = defaultStyle;\n    }\n    if (this.options.explode === null || this.options.explode === undefined) {\n      this.options.explode = defaultExplode;\n    }\n  }\n\n  serializeValue(value: any, separator = ','): string {\n    if (value === null || value === undefined) {\n      return '';\n    } else if (value instanceof Array) {\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\n    } else if (typeof value === 'object') {\n      const array: string[] = [];\n      for (const key of Object.keys(value)) {\n        let propVal = value[key];\n        if (propVal !== null && propVal !== undefined) {\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\n          if (this.options.explode) {\n            array.push(`${key}=${propVal}`);\n          } else {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n      }\n      return array.join(separator);\n    } else {\n      return String(value);\n    }\n  }\n}\n\n/**\n * A parameter in the operation path\n */\nclass PathParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(path: string): string {\n    let value = this.value;\n    if (value === null || value === undefined) {\n      value = '';\n    }\n    let prefix = this.options.style === 'label' ? '.' : '';\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\n    if (this.options.style === 'matrix') {\n      // The parameter name is just used as prefix, except in some cases...\n      prefix = `;${this.name}=`;\n      if (this.options.explode && typeof value === 'object') {\n        prefix = ';';\n        if (value instanceof Array) {\n          // For arrays we have to repeat the name for each element\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\n          separator = ';';\n        } else {\n          // For objects we have to put each the key / value pairs\n          value = this.serializeValue(value, ';');\n        }\n      }\n    }\n    value = prefix + this.serializeValue(value, separator);\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\n    path = path.replace(`{${this.name}}`, value);\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\n    return path;\n  }\n}\n\n/**\n * A parameter in the query\n */\nclass QueryParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'form', true);\n  }\n\n  append(params: HttpParams): HttpParams {\n    if (this.value instanceof Array) {\n      // Array serialization\n      if (this.options.explode) {\n        for (const v of this.value) {\n          params = params.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        const separator = this.options.style === 'spaceDelimited'\n          ? ' ' : this.options.style === 'pipeDelimited'\n            ? '|' : ',';\n        return params.append(this.name, this.serializeValue(this.value, separator));\n      }\n    } else if (this.value !== null && typeof this.value === 'object') {\n      // Object serialization\n      if (this.options.style === 'deepObject') {\n        // Append a parameter for each key, in the form `name[key]`\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\n          }\n        }\n      } else if (this.options.explode) {\n        // Append a parameter for each key without using the parameter name\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            params = params.append(key, this.serializeValue(propVal));\n          }\n        }\n      } else {\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\n        const array: any[] = [];\n        for (const key of Object.keys(this.value)) {\n          const propVal = this.value[key];\n          if (propVal !== null && propVal !== undefined) {\n            array.push(key);\n            array.push(propVal);\n          }\n        }\n        params = params.append(this.name, this.serializeValue(array));\n      }\n    } else if (this.value !== null && this.value !== undefined) {\n      // Plain value\n      params = params.append(this.name, this.serializeValue(this.value));\n    }\n    return params;\n  }\n}\n\n/**\n * A parameter in the HTTP request header\n */\nclass HeaderParameter extends Parameter {\n  constructor(name: string, value: any, options: ParameterOptions) {\n    super(name, value, options, 'simple', false);\n  }\n\n  append(headers: HttpHeaders): HttpHeaders {\n    if (this.value !== null && this.value !== undefined) {\n      if (this.value instanceof Array) {\n        for (const v of this.value) {\n          headers = headers.append(this.name, this.serializeValue(v));\n        }\n      } else {\n        headers = headers.append(this.name, this.serializeValue(this.value));\n      }\n    }\n    return headers;\n  }\n}\n\n/**\n * Helper to build http requests from parameters\n */\nexport class RequestBuilder {\n\n  private _path = new Map<string, PathParameter>();\n  private _query = new Map<string, QueryParameter>();\n  private _header = new Map<string, HeaderParameter>();\n  _bodyContent: any | null;\n  _bodyContentType?: string;\n\n  constructor(\n    public rootUrl: string,\n    public operationPath: string,\n    public method: string) {\n  }\n\n  /**\n   * Sets a path parameter\n   */\n  path(name: string, value: any, options?: ParameterOptions): void {\n    this._path.set(name, new PathParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a query parameter\n   */\n  query(name: string, value: any, options?: ParameterOptions): void {\n    this._query.set(name, new QueryParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets a header parameter\n   */\n  header(name: string, value: any, options?: ParameterOptions): void {\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\n  }\n\n  /**\n   * Sets the body content, along with the content type\n   */\n  body(value: any, contentType = 'application/json'): void {\n    if (value instanceof Blob) {\n      this._bodyContentType = value.type;\n    } else {\n      this._bodyContentType = contentType;\n    }\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\n      // Handle URL-encoded data\n      const pairs: string[][] = [];\n      for (const key of Object.keys(value)) {\n        let val = value[key];\n        if (!(val instanceof Array)) {\n          val = [val];\n        }\n        for (const v of val) {\n          const formValue = this.formDataValue(v);\n          if (formValue !== null) {\n            pairs.push([key, formValue]);\n          }\n        }\n      }\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\n    } else if (this._bodyContentType === 'multipart/form-data') {\n      // Handle multipart form data\n      const formData = new FormData();\n      if (value !== null && value !== undefined) {\n        for (const key of Object.keys(value)) {\n          const val = value[key];\n          if (val instanceof Array) {\n            for (const v of val) {\n              const toAppend = this.formDataValue(v);\n              if (toAppend !== null) {\n                formData.append(key, toAppend);\n              }\n            }\n          } else {\n            const toAppend = this.formDataValue(val);\n            if (toAppend !== null) {\n              formData.set(key, toAppend);\n            }\n          }\n        }\n      }\n      this._bodyContent = formData;\n    } else {\n      // The body is the plain content\n      this._bodyContent = value;\n    }\n  }\n\n  private formDataValue(value: any): any {\n    if (value === null || value === undefined) {\n      return null;\n    }\n    if (value instanceof Blob) {\n      return value;\n    }\n    if (typeof value === 'object') {\n      return JSON.stringify(value);\n    }\n    return String(value);\n  }\n\n  /**\n   * Builds the request with the current set parameters\n   */\n  build<T = any>(options?: {\n    /** Which content types to accept */\n    accept?: string;\n\n    /** The expected response type */\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\n\n    /** Whether to report progress on uploads / downloads */\n    reportProgress?: boolean;\n  }): HttpRequest<T> {\n\n    options = options || {};\n\n    // Path parameters\n    let path = this.operationPath;\n    for (const pathParam of this._path.values()) {\n      path = pathParam.append(path);\n    }\n    const url = this.rootUrl + path;\n\n    // Query parameters\n    let httpParams = new HttpParams({\n      encoder: ParameterCodecInstance\n    });\n    for (const queryParam of this._query.values()) {\n      httpParams = queryParam.append(httpParams);\n    }\n\n    // Header parameters\n    let httpHeaders = new HttpHeaders();\n    if (options.accept) {\n      httpHeaders = httpHeaders.append('Accept', options.accept);\n    }\n    for (const headerParam of this._header.values()) {\n      httpHeaders = headerParam.append(httpHeaders);\n    }\n\n    // Request content headers\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\n    }\n\n    // Perform the request\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\n      params: httpParams,\n      headers: httpHeaders,\n      responseType: options.responseType,\n      reportProgress: options.reportProgress\n    });\n  }\n}\n\n","import {Component, OnInit} from '@angular/core';\nimport {ApiService} from '../../api/services';\nimport {GatewayMessage, IntrospectToken} from '../../api/models';\nimport {HttpErrorResponse} from '@angular/common/http';\nimport {ToastrService} from 'ngx-toastr';\nimport jwt_decode from 'jwt-decode';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  gatewayMessage: GatewayMessage;\n  introspectToken: IntrospectToken;\n  decoded: any;\n  busy: boolean;\n\n  constructor(private apiService: ApiService,\n              private toastr: ToastrService\n  ) {\n  }\n\n  ngOnInit(): void {\n    const token = sessionStorage.getItem('token');\n    if (token) {\n      this.decoded = jwt_decode(token);\n      this.decoded.authorities = this.replaceCommas(this.decoded.authorities);\n      this.decoded.scope = this.replaceCommas(this.decoded.scope);\n    }\n  }\n\n  replaceCommas(value: any): string {\n    if (Array.isArray(value)) {\n      return value.join(', ');\n    }\n    return value;\n  }\n\n  onGatewayMessage(): void {\n    if (this.gatewayMessage) {\n      this.gatewayMessage = undefined;\n    } else {\n      this.busy = true;\n      this.apiService.apiGatewayMessageGet()\n        .subscribe(\n          res => {\n            this.busy = false;\n            this.gatewayMessage = res;\n          },\n          error => {\n            this.busy = false;\n            this.handleError(error);\n          }\n        );\n    }\n  }\n\n  onIntrospectToken(): void {\n    if (this.introspectToken) {\n      this.introspectToken = undefined\n    } else {\n      this.busy = true;\n      this.apiService.apiIntrospectTokenGet()\n        .subscribe(\n          res => {\n            this.busy = false;\n            this.introspectToken = res;\n          },\n          error => {\n            this.busy = false;\n            this.handleError(error);\n          }\n        );\n    }\n  }\n\n  handleError(error: any): void {\n    this.busy = false;\n    if (error instanceof HttpErrorResponse) {\n      if (error.error instanceof ErrorEvent) {\n        console.error('Error Event');\n      } else {\n        console.log(`error status : ${error.status} ${error.statusText}`);\n        switch (error.status) {\n          case 401:      // UNAUTHORIZED - Route them hope so the guard condition is re-appliced.\n            this.toastr.error('Your session has timed out. Please logout and sign back in.', 'UNAUTHORIZED');\n            break;\n          case 403:     // FORBIDDEN\n            this.toastr.error('You lack the required permissions for this resource.', 'FORBIDDEN');\n            break;\n        }\n      }\n    } else {\n      this.toastr.error('There was an error fetching the Gateway message.', 'ERROR');\n    }\n  }\n}\n","\n<div class=\"container-fluid p-4\">\n  <mat-card style=\"margin:2em;\">\n    <mat-card-header>\n      <h2 style=\"margin:0 auto;\">Microservice Security Demo</h2>\n    </mat-card-header>\n    <mat-card-actions align=\"end\">\n      <button mat-button color=\"primary\" class=\"ml-2\" mat-flat-button aria-label=\"Load Gateway Build Info\" (click)=\"onGatewayMessage()\"  >Load Gateway Message</button>\n      <button mat-button color=\"primary\" class=\"ml-2\" mat-flat-button aria-label=\"Introspect Token\" (click)=\"onIntrospectToken()\"  >Introspect Token</button>\n    </mat-card-actions>\n    <mat-spinner style=\"margin:0 auto;\" *ngIf=\"busy\"></mat-spinner>\n    <mat-card-content *ngIf=\"decoded\">\n      <mat-card-header><h2 style=\"margin:0 auto;\">Decode Token</h2></mat-card-header>\n      <mat-form-field appearance=\"standard\">\n        <mat-label>User Name</mat-label>\n        <input matInput disabled value=\"{{ decoded.user_name }}\">\n      </mat-form-field>\n      <mat-form-field appearance=\"standard\">\n        <mat-label>Authorities</mat-label>\n        <input matInput disabled value=\"{{ decoded.authorities }}\">\n      </mat-form-field>\n      <mat-form-field appearance=\"standard\">\n        <mat-label>Scope</mat-label>\n        <input matInput disabled value=\"{{ decoded.scope }}\">\n      </mat-form-field>\n    </mat-card-content>\n  </mat-card>\n  <mat-card style=\"margin:2em;\" *ngIf=\"gatewayMessage\">\n    <mat-card-header class=\"sub-header\">\n      <h2 style=\"margin:0 auto;\">Gateway Message</h2>\n    </mat-card-header>\n    <mat-card-content>\n      <mat-form-field appearance=\"standard\">\n        <mat-label>Version</mat-label>\n        <input matInput disabled value=\"{{ gatewayMessage.version }}\">\n      </mat-form-field>\n      <mat-form-field appearance=\"standard\">\n        <mat-label>Message</mat-label>\n        <input matInput disabled value=\"{{ gatewayMessage.message }}\">\n      </mat-form-field>\n    </mat-card-content>\n  </mat-card>\n  <mat-card style=\"margin:2em;\" *ngIf=\"introspectToken\">\n    <mat-card-header class=\"sub-header\">\n      <h2 style=\"margin:0 auto;\">Token Introspection</h2>\n    </mat-card-header>\n    <mat-card-content>\n      <mat-form-field appearance=\"standard\">\n        <mat-label>User Name</mat-label>\n        <input matInput disabled value=\"{{ introspectToken.sub }}\">\n      </mat-form-field>\n      <mat-form-field appearance=\"standard\">\n        <mat-label>Active</mat-label>\n        <input matInput disabled value=\"{{ introspectToken.active }}\">\n      </mat-form-field>\n      <mat-form-field appearance=\"standard\">\n        <mat-label>Scope</mat-label>\n        <input matInput disabled value=\"{{ introspectToken.scope }}\">\n      </mat-form-field>\n      <mat-form-field appearance=\"standard\">\n        <mat-label>Expires</mat-label>\n        <input matInput disabled value=\"{{ introspectToken.exp | date : 'medium' }}\">\n      </mat-form-field>\n    </mat-card-content>\n  </mat-card>\n</div>\n","<mat-toolbar color=\"primary\">\n  <mat-toolbar-row>\n    <span>Web Frontend</span>\n    <span class=\"example-fill-remaining-space\"></span>\n    <span class=\"example-spacer\"></span>\n    <span style=\"margin:0 auto;\" *ngIf=\"loginService.isUserLoggedIn()\">Welcome, {{loginService.getName() | titlecase}}</span>\n    <div>\n    <a style=\"float: right\" mat-button *ngIf=\"loginService.isUserLoggedIn()\" routerLink=\"/logout\" class=\"nav-link\">LogOut</a>\n    </div>\n  </mat-toolbar-row>\n</mat-toolbar>\n","import {Component, OnInit} from '@angular/core';\nimport {AuthenticationService} from '../../services/authentication.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor(public loginService: AuthenticationService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","export { ApiService } from './services/api.service';\n","/* tslint:disable */\n/* eslint-disable */\nimport {Injectable} from '@angular/core';\n\n/**\n * Global configuration\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiConfiguration {\n  rootUrl: string = 'http://localhost:5005';\n}\n\n/**\n * Parameters for `ApiModule.forRoot()`\n */\nexport interface ApiConfigurationParams {\n  rootUrl?: string;\n}\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {ApiService} from '../../api/services/api.service';\nimport {JwtToken} from '../../api/models/jwt-token';\n\n@Component({\n  selector: 'app-authorized',\n  templateUrl: './authorized.component.html',\n  styleUrls: ['./authorized.component.scss']\n})\nexport class AuthorizedComponent implements OnInit {\n  code: string;\n  state: string;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private apiService: ApiService\n  ) {\n  }\n\n  private static getArray(attribute: any): string[] {\n    if (Array.isArray(attribute)) {\n      return attribute;\n    }\n    return [attribute];\n  }\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      this.code = params.code;\n      this.state = params.state;\n      /*\n        This is a demo workaround. The first time /oauth/authorize is called, it triggers the custom login form,\n        but only a sessionID is returned, not an authorization code. The second time it is called, using\n        a valid sessionID, the authorization code is returned.\n       */\n      if (!this.code) {\n        const randomState: string = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n        const redirectUrl = encodeURI('http://localhost:4200/authorized');\n        window.location.href = 'http://localhost:5000/oauth/authorize?response_type=code&client_id=gateway-client&redirect_url=' + redirectUrl + '&state=' + randomState;\n        return false;\n      } else {\n        this.exchangeToken();\n      }\n    });\n  }\n\n  exchangeToken(): void {\n    console.log(`code = \"${this.code}\" state = \"${this.state}\"`);\n    const params = {authorizationCode: this.code};\n    console.log('calling apiService.authenticateGet');\n\n    this.apiService.apiExchangeTokenGet(params).subscribe(\n      success => this.handleUserData(success),\n      error => this.handleError(error)\n    );\n  }\n\n  handleError(error: any): void {\n    console.log('handleError() ' + error.message);\n    console.log(error);\n    let errorMsg = 'An error occurred exchanging the authentication code for an access token: ';\n    try {\n      errorMsg += encodeURIComponent(JSON.stringify(error.message));\n    } catch (e) {\n      console.error(e);\n    }\n    this.router.navigate(['error'], {queryParams: {errorMsg}});\n  }\n\n  handleUserData(jwtToken: JwtToken): void {\n    if (jwtToken && jwtToken.access_token && jwtToken.access_token.length > 0) {\n      console.log('Authorization code successfully exchanged for an access token');\n      const tokenStr = jwtToken.access_token;\n      sessionStorage.setItem('token', tokenStr);\n    } else {\n      sessionStorage.removeItem('token');\n    }\n    this.router.navigate(['/']);\n  }\n\n}\n","<div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"row-height\">\n  <mat-card fxFlex=\"30%\">\n    <mat-card-header>\n      <h1 style=\"margin:0 auto;\">Authenticating user...</h1>\n    </mat-card-header>\n    <mat-card-content fxLayout=\"column\">\n        <mat-spinner style=\"margin:0 auto;\"></mat-spinner>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {CanDeactivate} from '@angular/router';\n\nexport interface CanComponentDeactivate {\n  canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\n}\n\n@Injectable()\nexport class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {\n\n  canDeactivate(component: CanComponentDeactivate): Observable<boolean> | Promise<boolean> | boolean {\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n\n}\n","import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {CookieService} from 'ngx-cookie-service';\nimport {HttpClient} from '@angular/common/http';\n\n@Component({\n  selector: 'app-logout',\n  templateUrl: './logout.component.html',\n  styleUrls: ['./logout.component.scss']\n})\nexport class LogoutComponent implements OnInit {\n\n  constructor(private router: Router,\n              private http: HttpClient,\n              private cookieService: CookieService) {\n  }\n\n  ngOnInit(): void {\n    this.logout();\n  }\n\n  logout(): void {\n    console.log('Perform logout');\n    sessionStorage.clear();\n    localStorage.clear();\n    // this.cookieService.delete('JSESSIONID');\n    this.cookieService.deleteAll();\n    const url = 'http://localhost:5000/logout';\n    window.location.href = 'http://localhost:5000/logout';\n\n  }\n}\n","<div fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"row-height\">\n  <mat-card fxFlex=\"30%\">\n    <mat-card-header>\n      <h1 style=\"margin:0 auto;\">Logging out...</h1>\n    </mat-card-header>\n    <mat-card-content>\n      <mat-spinner style=\"margin:0 auto;\"></mat-spinner>\n    </mat-card-content>\n  </mat-card>\n</div>\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'web-frontend';\n}\n","<app-header></app-header>\n<router-outlet></router-outlet>\n","/* tslint:disable */\n/* eslint-disable */\nimport {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {ApiConfiguration} from './api-configuration';\n\n/**\n * Base class for services\n */\n@Injectable()\nexport class BaseService {\n  constructor(\n    protected config: ApiConfiguration,\n    protected http: HttpClient\n  ) {\n  }\n\n  private _rootUrl: string = '';\n\n  /**\n   * Returns the root url for all operations in this service. If not set directly in this\n   * service, will fallback to `ApiConfiguration.rootUrl`.\n   */\n  get rootUrl(): string {\n    return this._rootUrl || this.config.rootUrl;\n  }\n\n  /**\n   * Sets the root URL for API operations in this service.\n   */\n  set rootUrl(rootUrl: string) {\n    this._rootUrl = rootUrl;\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\nimport {Injectable} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {BaseService} from '../base-service';\nimport {ApiConfiguration} from '../api-configuration';\nimport {StrictHttpResponse} from '../strict-http-response';\nimport {RequestBuilder} from '../request-builder';\nimport {Observable} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\n\nimport {GatewayMessage} from '../models/gateway-message';\nimport {IntrospectToken} from '../models/introspect-token';\nimport {JwtToken} from '../models/jwt-token';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService extends BaseService {\n  constructor(\n    config: ApiConfiguration,\n    http: HttpClient\n  ) {\n    super(config, http);\n  }\n\n  /**\n   * Path part for operation apiExchangeTokenGet\n   */\n  static readonly ApiExchangeTokenGetPath = '/api/exchangeToken';\n\n  /**\n   * Returns a jwt token.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiExchangeTokenGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiExchangeTokenGet$Response(params: {\n    authorizationCode: string;\n  }): Observable<StrictHttpResponse<JwtToken>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ApiService.ApiExchangeTokenGetPath, 'get');\n    if (params) {\n      rb.query('authorizationCode', params.authorizationCode, {});\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<JwtToken>;\n      })\n    );\n  }\n\n  /**\n   * Returns a jwt token.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `apiExchangeTokenGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiExchangeTokenGet(params: {\n    authorizationCode: string;\n  }): Observable<JwtToken> {\n\n    return this.apiExchangeTokenGet$Response(params).pipe(\n      map((r: StrictHttpResponse<JwtToken>) => r.body as JwtToken)\n    );\n  }\n\n  /**\n   * Path part for operation apiIntrospectTokenGet\n   */\n  static readonly ApiIntrospectTokenGetPath = '/api/introspectToken';\n\n  /**\n   * Returns the token introspection.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiIntrospectTokenGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiIntrospectTokenGet$Response(params?: {\n  }): Observable<StrictHttpResponse<IntrospectToken>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ApiService.ApiIntrospectTokenGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<IntrospectToken>;\n      })\n    );\n  }\n\n  /**\n   * Returns the token introspection.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `apiIntrospectTokenGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiIntrospectTokenGet(params?: {\n  }): Observable<IntrospectToken> {\n\n    return this.apiIntrospectTokenGet$Response(params).pipe(\n      map((r: StrictHttpResponse<IntrospectToken>) => r.body as IntrospectToken)\n    );\n  }\n\n  /**\n   * Path part for operation apiGatewayMessageGet\n   */\n  static readonly ApiGatewayMessageGetPath = '/api/gatewayMessage';\n\n  /**\n   * Returns the gateway information.\n   *\n   *\n   *\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\n   * To access only the response body, use `apiGatewayMessageGet()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGatewayMessageGet$Response(params?: {\n  }): Observable<StrictHttpResponse<GatewayMessage>> {\n\n    const rb = new RequestBuilder(this.rootUrl, ApiService.ApiGatewayMessageGetPath, 'get');\n    if (params) {\n    }\n\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'application/json'\n    })).pipe(\n      filter((r: any) => r instanceof HttpResponse),\n      map((r: HttpResponse<any>) => {\n        return r as StrictHttpResponse<GatewayMessage>;\n      })\n    );\n  }\n\n  /**\n   * Returns the gateway information.\n   *\n   *\n   *\n   * This method provides access to only to the response body.\n   * To access the full response (for headers, for example), `apiGatewayMessageGet$Response()` instead.\n   *\n   * This method doesn't expect any request body.\n   */\n  apiGatewayMessageGet(params?: {\n  }): Observable<GatewayMessage> {\n\n    return this.apiGatewayMessageGet$Response(params).pipe(\n      map((r: StrictHttpResponse<GatewayMessage>) => r.body as GatewayMessage)\n    );\n  }\n\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {HomeComponent} from './pages/home/home.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatButtonModule} from '@angular/material/button';\nimport {LogoutComponent} from './pages/logout/logout.component';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {HeaderComponent} from './components/header/header.component';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\nimport {MatInputModule} from '@angular/material/input';\nimport {CanDeactivateGuard} from './directives/can-component-deactivate';\nimport {TokenInterceptor} from './components/auth/token.interceptor';\nimport {AuthorizedComponent} from './pages/authorized/authorized.component';\nimport {ErrorComponent} from './pages/error/error.component';\nimport {CookieService} from 'ngx-cookie-service';\nimport {ToastrModule} from 'ngx-toastr';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    LogoutComponent,\n    HeaderComponent,\n    AuthorizedComponent,\n    ErrorComponent,\n  ],\n  imports: [\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCardModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatProgressSpinnerModule,\n    ToastrModule.forRoot()\n  ],\n  providers: [\n    CanDeactivateGuard,\n    CookieService,\n    { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {Injectable} from '@angular/core';\nimport jwt_decode from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  // httpOptions = {\n  //   headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  // };\n\n  constructor() {\n  }\n\n  // exchangeToken(authenticationCode: string): Observable<any> {\n  //   console.log(`AuthenticationService exchangeToken <-- ${authenticationCode}`);\n  //   return this.httpClient\n  //     .get('http://localhost:5005/authenticate/' + authenticationCode, this.httpOptions);\n  // }\n\n  isUserLoggedIn(): boolean {\n    return sessionStorage.getItem('token') !== null;\n  }\n\n  getName(): any {\n    const token = sessionStorage.getItem('token');\n    if (token) {\n      const decoded: any = jwt_decode(token);\n      return decoded.user_name;\n    }\n    return null;\n  }\n\n}\n\n\n","import {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor() {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // All HTTP requests are going to go through this method\n    const token = sessionStorage.getItem('token');\n    if (token) {\n      const request: HttpRequest<any> = req.clone({\n        setHeaders: {\n          Authorization: 'Bearer ' + token\n        }\n      });\n      return next.handle(request);\n    }\n    return next.handle(req);\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n  ) {}\n\n  public isAuthenticated(): boolean {\n    const tokens: string = sessionStorage.getItem('token');\n    if (tokens) {\n      try {\n        return true;\n        // put refresh token logic here\n      } catch (e) {\n        console.error('Access token error', e);\n        localStorage.removeItem('token');\n      }\n    }\n    return false;\n\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\nimport {AuthService} from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService implements CanActivate {\n  loginUrl: string;\n\n  constructor(\n    public auth: AuthService,\n    public router: Router) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    localStorage.setItem('canActivate', state.url);\n\n    if (this.auth.isAuthenticated()) {\n      return true;\n    }\n    this.router.navigate(['authorized']);\n    return false;\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {HomeComponent} from './pages/home/home.component';\nimport {LogoutComponent} from './pages/logout/logout.component';\nimport {AuthGuardService} from './components/auth/auth-guard.service';\nimport {AuthorizedComponent} from './pages/authorized/authorized.component';\nimport {ErrorComponent} from './pages/error/error.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent, canActivate: [AuthGuardService]},\n  { path: 'authorized', component: AuthorizedComponent },\n  { path: 'logout', component: LogoutComponent },\n  { path: 'error', component: ErrorComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.scss']\n})\nexport class ErrorComponent implements OnInit {\n  message: string;\n  constructor(private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      if (params.errorMsg) {\n        this.message = decodeURI(params.errorMsg);\n      }\n    });\n  }\n\n}\n","<mat-card style=\"margin:2em;\">\n  <mat-card-header>\n    <mat-card-title>An Error Occurred</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <p>If any information is available, it will appear below:</p>\n    <p>{{message}}</p>\n  </mat-card-content>\n</mat-card>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}